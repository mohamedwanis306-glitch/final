/**********************************************************************
 * ملف تمرين الطلاب
 * 
 * يحتوي هذا الملف على تعليمات خطوة بخطوة لتنفيذ
 * صفحة تسجيل الدخول ونظام إدارة الطلاب. جميع أقسام الكود
 * معطلة بالتعليقات مع المهام والتلميحات للطلاب.
 **********************************************************************/

/******************************
 * تعليمات صفحة تسجيل الدخول
 ******************************/

/*
1. أنشئ متغير لتتبع محاولات تسجيل الدخول.
   مثال: let attempts = 0;

2. أنشئ دالة handleLogin() التي تقوم بما يلي:
   - قراءة اسم المستخدم وكلمة المرور من مدخلات النموذج.
     تلميح: document.getElementById('username').value.trim()
   - تخزين بيانات الاعتماد الصحيحة في كائن.
     مثال: const user = { username: "yourname", password: "password123" };
   - مقارنة البيانات المدخلة مع البيانات الصحيحة.

3. إذا كانت بيانات تسجيل الدخول صحيحة:
   - إعادة التوجيه إلى "student.html"
   - تلميح: window.location.href = "student.html";

4. إذا كانت بيانات تسجيل الدخول خاطئة:
   - زيادة عداد المحاولات.
   - عرض تنبيه بالرسالة: "بيانات غير صحيحة. محاولة X/3"
   - بعد 3 محاولات فاشلة، عرض الرسالة: "عدد المحاولات الفاشلة كبير جداً"

5. تأكد من تطابق معرفات عناصر HTML مع الكود في JS.

6. اختياري:
   - إضافة أيقونات في المدخلات (مثل اسم المستخدم وكلمة المرور)
   - تنسيق زر تسجيل الدخول ليبدو عصريًا
*/

/******************************
 * تعليمات صفحة إدارة الطلاب
 ******************************/

/*
1. أنشئ مصفوفة لتخزين بيانات الطلاب:
   مثال: let students = [];
   ومتغير لتخزين نوع الفلتر:
   مثال: let filter = "all";

2. إضافة وظيفة إضافة طالب:
   - قراءة القيم من مدخلات النموذج (الاسم، العمر، رقم الطالب، المواد)
   - التأكد من أن جميع الحقول ممتلئة
   - تحويل نص المواد إلى مصفوفة من الكائنات:
     مثال: [{ course: "Math", mark: 80 }, { course: "English", mark: 70 }]
   - التأكد من أن العلامات أرقام وأن المواد ليست فارغة
   - حساب المتوسط لكل طالب
   - تحديد حالة الطالب: "Passed" إذا كان المتوسط >= 50، وإلا "Failed"
   - إضافة كائن الطالب إلى مصفوفة students
   - إعادة ضبط النموذج بعد الإضافة

3. عرض الطلاب:
   - اجتياز مصفوفة الطلاب (تطبيق الفلتر إذا لزم الأمر)
   - إنشاء HTML ديناميكي لكل طالب:
     - الاسم، الرقم، العمر، المتوسط، الحالة
     - قائمة المواد مع العلامات
     - أزرار التعديل والحذف
   - استخدام container.innerHTML += ... لإضافة كل بطاقة طالب

4. تصفية الطلاب:
   - إنشاء دالة filterStudents(type)
   - تحديث متغير الفلتر
   - إعادة عرض الطلاب

5. حذف طالب:
   - إزالة الطالب المحدد من مصفوفة students
   - تحديث العرض

6. تعديل طالب:
   - ملء حقول النموذج ببيانات الطالب المحدد
   - إزالة الطالب القديم من المصفوفة لتجنب التكرار
   - يمكن للمستخدم تحديث القيم وإعادة إضافة الطالب

7. عرض الإحصائيات العامة:
   - حساب العدد الإجمالي للطلاب
   - حساب المتوسط العام لجميع الطلاب
   - عرضها ديناميكيًا في HTML

8. تلميحات إضافية:
   - استخدام template literals لتوليد HTML
   - التأكد من تطابق جميع معرفات HTML مع JS
   - التحقق من صحة أنواع البيانات المدخلة
   - استخدام CSS لتنسيق حالة الطالب (Passed/Failed)
   - اختياري: تنسيق الأزرار، بطاقات الطلاب، وعلامات المواد لتبدو عصريًا

9. تحديات اختيارية:
   - جعل الصفحة متوافقة مع جميع أحجام الشاشات (Responsive)
   - إضافة زر لمسح النموذج
   - تمييز المواد ذات العلامات العالية أو المنخفضة بألوان مختلفة
*/

/******************************
 * ملاحظات عامة
 ******************************/

/*
- تأكد من ربط جميع الدوال بعناصر HTML باستخدام getElementById أو event listeners
- لا تقم بتثبيت أي HTML جاهز، بل أنشئه ديناميكيًا
- قسم المهام إلى خطوات صغيرة: إضافة -> عرض -> فلتر -> تعديل -> حذف -> إحصائيات
- شجع على كتابة كود نظيف وقابل للقراءة
- راقب أسماء المتغيرات والمراجع بعناية
- يجب على الطلاب تنفيذ المنطق المفقود بأنفسهم وفقًا لهذه التعليمات
*/
